"""Simple CLI for LocalDB operations."""
import click
from .config import config_manager

logger = None


def get_db_path():
    """–ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    config = config_manager.get_config()
    return str(config.db_path.expanduser())


@click.group()
@click.pass_context
def main(ctx):
    """LocalDB - –ø—Ä–æ—Å—Ç–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö."""
    ctx.ensure_object(dict)


@main.command("setup-user")
@click.argument('email')
@click.pass_context
def setup_user(ctx, email: str):
    """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ Garmin Connect."""
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ email (—á–∞—Å—Ç—å –¥–æ @)
    user_id = email.split('@')[0]
    
    try:
        import getpass
        from ..auth.client import AuthClient
        from .core import LocalDBClient
        
        # 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        password = getpass.getpass(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {email} –≤ Garmin Connect: ")
        
        # 2. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –≤ Garmin Connect
        click.echo("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Garmin Connect...")
        auth_client = AuthClient()
        
        result = auth_client.login(email, password)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if isinstance(result, tuple) and result[0] == "needs_mfa":
            click.echo("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            mfa_code = click.prompt("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/SMS")
            result = auth_client.resume_login(mfa_code, result[1])
        
        # 3. –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        click.echo("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        with LocalDBClient(get_db_path()) as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = client.get_user(user_id)
            if existing_user:
                click.echo(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            else:
                click.echo(f"üë§ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                client.add_user(user_id, email)
            
        click.echo(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({email}) —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        click.echo(f"üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ: garmy-localdb sync {user_id}")
        
    except Exception as e:
        click.echo(f"‚úó –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        if "Two-factor authentication" in str(e) or "MFA" in str(e):
            click.echo("üí° –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.")
        elif "Invalid credentials" in str(e) or "login" in str(e).lower():
            click.echo("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏ –ø–∞—Ä–æ–ª—è.")


@main.command("login")
@click.argument('user_id')
@click.pass_context
def login_user(ctx, user_id: str):
    """–ü–æ–≤—Ç–æ—Ä–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        from ..auth.client import AuthClient
        from .core import LocalDBClient
        import getpass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        with LocalDBClient(get_db_path()) as client:
            user = client.get_user(user_id)
            if not user:
                click.echo(f"‚úó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                click.echo(f"üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: garmy-localdb setup-user email@example.com")
                return
            
            email = user['email']
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        password = getpass.getpass(f"–ü–∞—Ä–æ–ª—å –¥–ª—è {email} –≤ Garmin Connect: ")
        
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        click.echo("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Garmin Connect...")
        auth_client = AuthClient()
        
        result = auth_client.login(email, password)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if isinstance(result, tuple) and result[0] == "needs_mfa":
            click.echo("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
            mfa_code = click.prompt("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/SMS")
            result = auth_client.resume_login(mfa_code, result[1])
            
        click.echo(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        
    except Exception as e:
        click.echo(f"‚úó –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        if "Two-factor authentication" in str(e) or "MFA" in str(e):
            click.echo("üí° –í–æ–∑–º–æ–∂–Ω–æ, —É –≤–∞—Å –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.")
        elif "Invalid credentials" in str(e) or "login" in str(e).lower():
            click.echo("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å email –∏ –ø–∞—Ä–æ–ª—è.")


@main.command("status")
@click.argument('user_id')
@click.pass_context
def check_status(ctx, user_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        from ..auth.client import AuthClient
        from .core import LocalDBClient
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        with LocalDBClient(get_db_path()) as client:
            user = client.get_user(user_id)
            if not user:
                click.echo(f"‚úó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ")
                click.echo(f"üí° –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: garmy-localdb setup-user email@example.com")
                return
            
            click.echo(f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user['user_id']} ({user['email']})")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        auth_client = AuthClient()
        if auth_client.is_authenticated:
            click.echo("‚úì –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Garmin Connect")
        else:
            click.echo("‚úó –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ Garmin Connect")
            click.echo(f"üí° –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å: garmy-localdb login {user_id}")
            
    except Exception as e:
        click.echo(f"‚úó –û—à–∏–±–∫–∞: {e}")


@main.command("users")
@click.pass_context
def list_users(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        from .core import LocalDBClient
        
        with LocalDBClient(get_db_path()) as client:
            users = client.list_users()
            if not users:
                click.echo("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            click.echo("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            for user in users:
                click.echo(f"  {user['user_id']} - {user['email']}")
    except Exception as e:
        click.echo(f"‚úó –û—à–∏–±–∫–∞: {e}")


@main.command("sync")
@click.argument('user_id')
@click.argument('start_date', required=False)
@click.argument('end_date', required=False)
@click.option('--days', default=7, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –¥–∞—Ç—ã)')
@click.option('--progress/--no-progress', default=True, help='–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å')
@click.pass_context
def sync_data(ctx, user_id: str, start_date: str, end_date: str, days: int, progress: bool):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    try:
        from .core import LocalDBClient
        from datetime import date, datetime, timedelta
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
        if start_date and end_date:
            start = datetime.strptime(start_date, '%Y-%m-%d').date()
            end = datetime.strptime(end_date, '%Y-%m-%d').date()
            click.echo(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id} —Å {start_date} –ø–æ {end_date}...")
        else:
            end = date.today()
            start = end - timedelta(days=days-1)
            click.echo(f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {user_id} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
        
        progress_bar = None
        def progress_callback(sync_progress):
            nonlocal progress_bar
            if progress:
                # Handle both legacy and enhanced progress formats
                if hasattr(sync_progress, 'total_metrics'):
                    # Legacy format
                    total = sync_progress.total_metrics
                    current = sync_progress.completed_metrics
                    current_metric = sync_progress.current_metric
                    current_date = sync_progress.current_date
                elif isinstance(sync_progress, dict):
                    # Enhanced format
                    total = sync_progress.get('total_items', 0)
                    current = sync_progress.get('completed_items', 0)
                    current_metric = sync_progress.get('current_metric', '')
                    current_date = sync_progress.get('current_date', '')
                else:
                    return
                
                if progress_bar is None:
                    try:
                        from tqdm import tqdm
                        progress_bar = tqdm(total=total, desc="Syncing metrics")
                    except ImportError:
                        # Fallback –µ—Å–ª–∏ tqdm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
                        percentage = (current / total * 100) if total > 0 else 0
                        click.echo(f"\r[{current}/{total}] {percentage:.1f}% {current_metric}", nl=False)
                        return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
                progress_bar.n = current
                progress_bar.set_postfix_str(f"{current_metric} | {current_date}")
                progress_bar.refresh()
        
        async def run_sync():
            with LocalDBClient(get_db_path()) as client:
                # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–æ–ª–±—ç–∫–æ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                result = await client.sync_user_data(user_id, start, end, progress_callback if progress else None)
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–±–∞—Ä
                if progress and progress_bar:
                    progress_bar.close()
                
                if isinstance(result, dict):
                    success = result.get('total_success', 0)
                    failed = result.get('total_failed', 0)
                    skipped = result.get('total_skipped', 0)
                    total_records = result.get('total_records', success)
                    
                    click.echo(f"‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {success} —É—Å–ø–µ—à–Ω–æ, {failed} –Ω–µ—É–¥–∞—á–Ω–æ, {skipped} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                    
                    if success > 0:
                        click.echo(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {total_records} –∑–∞–ø–∏—Å–µ–π")
                        
                        # Show metrics breakdown
                        metrics_synced = result.get('metrics_synced', {})
                        if metrics_synced:
                            click.echo("üìà –ü–æ –º–µ—Ç—Ä–∏–∫–∞–º:")
                            for metric, counts in metrics_synced.items():
                                success_count = counts.get('success', 0)
                                skipped_count = counts.get('skipped', 0)
                                if success_count > 0 or skipped_count > 0:
                                    status_parts = []
                                    if success_count > 0:
                                        status_parts.append(f"{success_count} –Ω–æ–≤—ã—Ö")
                                    if skipped_count > 0:
                                        status_parts.append(f"{skipped_count} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
                                    click.echo(f"   {metric}: {', '.join(status_parts)}")
                else:
                    click.echo("‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        import asyncio
        asyncio.run(run_sync())
                
    except Exception as e:
        click.echo(f"‚úó –û—à–∏–±–∫–∞: {e}")


@main.command("stats")
@click.pass_context
def show_stats(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        from .core import LocalDBClient
        
        with LocalDBClient(get_db_path()) as client:
            stats = client.get_database_stats()
            
            click.echo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
            click.echo(f"  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats.get('users', 0)}")
            click.echo(f"  –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats.get('total_records', 0)}")
            
            if 'metrics' in stats:
                click.echo("  –ú–µ—Ç—Ä–∏–∫–∏:")
                for metric, count in stats['metrics'].items():
                    click.echo(f"    {metric}: {count}")
                    
    except Exception as e:
        click.echo(f"‚úó –û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()
