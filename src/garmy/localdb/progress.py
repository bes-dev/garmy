"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –≤—ã–≤–æ–¥–∞: –ª–æ–≥–∏, progress bars, JSON –∏ –¥—Ä—É–≥–∏–µ.
"""

import json
import logging
import time
from abc import ABC, abstractmethod
from datetime import datetime
from typing import Dict, Any, Optional, List
from dataclasses import dataclass, asdict
from enum import Enum

try:
    from tqdm import tqdm
    TQDM_AVAILABLE = True
except ImportError:
    TQDM_AVAILABLE = False

try:
    from rich.console import Console
    from rich.progress import Progress, TaskID, SpinnerColumn, TextColumn, BarColumn, MofNCompleteColumn, TimeElapsedColumn
    from rich.live import Live
    from rich.table import Table
    from rich.text import Text
    RICH_AVAILABLE = True
except ImportError:
    RICH_AVAILABLE = False


class ProgressEventType(Enum):
    """–¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    SYNC_START = "sync_start"
    SYNC_END = "sync_end" 
    TASK_START = "task_start"
    TASK_COMPLETE = "task_complete"
    TASK_FAILED = "task_failed"
    TASK_SKIPPED = "task_skipped"
    BATCH_PROGRESS = "batch_progress"
    METRIC_SYNCED = "metric_synced"
    ACTIVITY_SYNCED = "activity_synced"
    ERROR = "error"
    WARNING = "warning"
    INFO = "info"


@dataclass
class ProgressEvent:
    """–°–æ–±—ã—Ç–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    event_type: ProgressEventType
    message: str
    timestamp: datetime
    data: Dict[str, Any]
    
    def to_dict(self) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å."""
        result = asdict(self)
        result['timestamp'] = self.timestamp.isoformat()
        result['event_type'] = self.event_type.value
        return result


@dataclass
class SyncStats:
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
    total_tasks: int = 0
    completed: int = 0
    failed: int = 0
    skipped: int = 0
    current_task: str = ""
    start_time: Optional[datetime] = None
    end_time: Optional[datetime] = None
    
    @property
    def processed(self) -> int:
        """–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á."""
        return self.completed + self.failed + self.skipped
    
    @property
    def progress_percentage(self) -> float:
        """–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
        return (self.processed / self.total_tasks * 100) if self.total_tasks > 0 else 0
    
    @property
    def elapsed_time(self) -> float:
        """–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        if not self.start_time:
            return 0
        end = self.end_time or datetime.now()
        return (end - self.start_time).total_seconds()
    
    @property
    def eta_seconds(self) -> Optional[float]:
        """–û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."""
        if self.processed == 0 or self.elapsed_time == 0:
            return None
        
        remaining_tasks = self.total_tasks - self.processed
        avg_task_time = self.elapsed_time / self.processed
        return remaining_tasks * avg_task_time


class ProgressReporter(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
    
    def __init__(self, name: str = "sync"):
        self.name = name
        self.stats = SyncStats()
        self.events: List[ProgressEvent] = []
    
    def emit_event(self, event_type: ProgressEventType, message: str, **data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è."""
        event = ProgressEvent(
            event_type=event_type,
            message=message,
            timestamp=datetime.now(),
            data=data
        )
        self.events.append(event)
        self._handle_event(event)
    
    @abstractmethod
    def _handle_event(self, event: ProgressEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ)."""
        pass
    
    def start_sync(self, total_tasks: int, description: str = ""):
        """–ù–∞—á–∞–ª–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        self.stats.total_tasks = total_tasks
        self.stats.start_time = datetime.now()
        self.emit_event(ProgressEventType.SYNC_START, f"Starting sync: {description}", 
                       total_tasks=total_tasks, description=description)
    
    def end_sync(self, success: bool = True):
        """–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏."""
        self.stats.end_time = datetime.now()
        status = "completed" if success else "failed"
        self.emit_event(ProgressEventType.SYNC_END, f"Sync {status}", 
                       success=success, stats=asdict(self.stats))
    
    def task_start(self, task_name: str, details: str = ""):
        """–ù–∞—á–∞–ª–æ –∑–∞–¥–∞—á–∏."""
        self.stats.current_task = task_name
        self.emit_event(ProgressEventType.TASK_START, f"Starting: {task_name}", 
                       task_name=task_name, details=details)
    
    def task_complete(self, task_name: str, details: str = ""):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏."""
        self.stats.completed += 1
        self.emit_event(ProgressEventType.TASK_COMPLETE, f"Completed: {task_name}", 
                       task_name=task_name, details=details)
    
    def task_failed(self, task_name: str, error: str = ""):
        """–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ."""
        self.stats.failed += 1
        self.emit_event(ProgressEventType.TASK_FAILED, f"Failed: {task_name}", 
                       task_name=task_name, error=error)
    
    def task_skipped(self, task_name: str, reason: str = ""):
        """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–¥–∞—á–∏."""
        self.stats.skipped += 1
        self.emit_event(ProgressEventType.TASK_SKIPPED, f"Skipped: {task_name}", 
                       task_name=task_name, reason=reason)
    
    def metric_synced(self, metric_type: str, date: str, records: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞."""
        self.emit_event(ProgressEventType.METRIC_SYNCED, f"Synced {metric_type} for {date}", 
                       metric_type=metric_type, date=date, records=records)
    
    def activity_synced(self, date: str, count: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        self.emit_event(ProgressEventType.ACTIVITY_SYNCED, f"Synced {count} activities for {date}", 
                       date=date, count=count)
    
    def error(self, message: str, **data):
        """–û—à–∏–±–∫–∞."""
        self.emit_event(ProgressEventType.ERROR, message, **data)
    
    def warning(self, message: str, **data):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ."""
        self.emit_event(ProgressEventType.WARNING, message, **data)
    
    def info(self, message: str, **data):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."""
        self.emit_event(ProgressEventType.INFO, message, **data)


class LoggingReporter(ProgressReporter):
    """–†–µ–ø–æ—Ä—Ç–µ—Ä —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    
    def __init__(self, name: str = "sync", logger: Optional[logging.Logger] = None, 
                 log_level: int = logging.INFO, show_progress: bool = True):
        super().__init__(name)
        self.logger = logger or logging.getLogger(f"{__name__}.{name}")
        self.log_level = log_level
        self.show_progress = show_progress
        self._last_progress_log = 0
        self._progress_interval = 10  # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–¥–∞—á
    
    def _handle_event(self, event: ProgressEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
        level_map = {
            ProgressEventType.ERROR: logging.ERROR,
            ProgressEventType.WARNING: logging.WARNING,
            ProgressEventType.TASK_FAILED: logging.WARNING,
        }
        
        log_level = level_map.get(event.event_type, self.log_level)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
        message = event.message
        if event.event_type == ProgressEventType.SYNC_START:
            message = f"üöÄ {message}"
        elif event.event_type == ProgressEventType.SYNC_END:
            elapsed = self.stats.elapsed_time
            message = f"‚úÖ {message} in {elapsed:.1f}s - {self.stats.completed} success, {self.stats.failed} failed, {self.stats.skipped} skipped"
        elif event.event_type == ProgressEventType.TASK_COMPLETE and self.show_progress:
            # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
            if self.stats.processed - self._last_progress_log >= self._progress_interval:
                progress = self.stats.progress_percentage
                eta = self.stats.eta_seconds
                eta_str = f", ETA: {eta:.0f}s" if eta else ""
                message = f"üìä Progress: {self.stats.processed}/{self.stats.total_tasks} ({progress:.1f}%){eta_str}"
                self._last_progress_log = self.stats.processed
            else:
                return  # –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∑–∞–¥–∞—á—É
        
        self.logger.log(log_level, message)


class TqdmReporter(ProgressReporter):
    """–†–µ–ø–æ—Ä—Ç–µ—Ä —á–µ—Ä–µ–∑ tqdm progress bar."""
    
    def __init__(self, name: str = "sync", leave: bool = True, 
                 show_details: bool = True, update_interval: float = 0.1):
        super().__init__(name)
        if not TQDM_AVAILABLE:
            raise ImportError("tqdm is required for TqdmReporter. Install with: pip install tqdm")
        
        self.leave = leave
        self.show_details = show_details
        self.update_interval = update_interval
        self.pbar: Optional[tqdm] = None
        self._last_update = 0
    
    def _handle_event(self, event: ProgressEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ tqdm."""
        if event.event_type == ProgressEventType.SYNC_START:
            self.pbar = tqdm(
                total=self.stats.total_tasks,
                desc=f"üîÑ {self.name}",
                leave=self.leave,
                unit="task"
            )
        
        elif event.event_type == ProgressEventType.SYNC_END and self.pbar:
            self.pbar.close()
        
        elif event.event_type in [ProgressEventType.TASK_COMPLETE, ProgressEventType.TASK_FAILED, ProgressEventType.TASK_SKIPPED]:
            if self.pbar:
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.pbar.update(1)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if self.show_details and time.time() - self._last_update > self.update_interval:
                    progress = self.stats.progress_percentage
                    desc = f"üîÑ {self.name} ({progress:.1f}%)"
                    if self.stats.current_task:
                        desc += f" - {self.stats.current_task}"
                    self.pbar.set_description(desc)
                    self._last_update = time.time()
        
        elif event.event_type == ProgressEventType.ERROR and self.pbar:
            self.pbar.write(f"‚ùå Error: {event.message}")
        
        elif event.event_type == ProgressEventType.WARNING and self.pbar:
            self.pbar.write(f"‚ö†Ô∏è Warning: {event.message}")


class RichReporter(ProgressReporter):
    """–†–µ–ø–æ—Ä—Ç–µ—Ä —á–µ—Ä–µ–∑ Rich (–∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)."""
    
    def __init__(self, name: str = "sync", show_details: bool = True, 
                 show_stats_table: bool = True):
        super().__init__(name)
        if not RICH_AVAILABLE:
            raise ImportError("rich is required for RichReporter. Install with: pip install rich")
        
        self.console = Console()
        self.show_details = show_details
        self.show_stats_table = show_stats_table
        self.progress: Optional[Progress] = None
        self.task_id: Optional[TaskID] = None
        self.live: Optional[Live] = None
    
    def _handle_event(self, event: ProgressEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Rich."""
        if event.event_type == ProgressEventType.SYNC_START:
            self.progress = Progress(
                SpinnerColumn(),
                TextColumn("[progress.description]{task.description}"),
                BarColumn(),
                MofNCompleteColumn(),
                TextColumn("({task.percentage:>3.0f}%)"),
                TimeElapsedColumn(),
                console=self.console
            )
            
            self.task_id = self.progress.add_task(
                f"üîÑ {self.name}",
                total=self.stats.total_tasks
            )
            
            if self.show_stats_table:
                self.live = Live(self._create_layout(), console=self.console, refresh_per_second=2)
                self.live.start()
            else:
                self.progress.start()
        
        elif event.event_type == ProgressEventType.SYNC_END:
            if self.live:
                self.live.stop()
            elif self.progress:
                self.progress.stop()
            
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            status = "‚úÖ Completed" if event.data.get('success', True) else "‚ùå Failed"
            elapsed = self.stats.elapsed_time
            self.console.print(f"{status} in {elapsed:.1f}s - {self.stats.completed} success, {self.stats.failed} failed, {self.stats.skipped} skipped")
        
        elif event.event_type in [ProgressEventType.TASK_COMPLETE, ProgressEventType.TASK_FAILED, ProgressEventType.TASK_SKIPPED]:
            if self.progress and self.task_id is not None:
                self.progress.update(self.task_id, advance=1)
                
                if self.show_details and self.stats.current_task:
                    desc = f"üîÑ {self.name} - {self.stats.current_task}"
                    self.progress.update(self.task_id, description=desc)
        
        elif event.event_type == ProgressEventType.ERROR:
            self.console.print(f"‚ùå [red]Error:[/red] {event.message}")
        
        elif event.event_type == ProgressEventType.WARNING:
            self.console.print(f"‚ö†Ô∏è [yellow]Warning:[/yellow] {event.message}")
    
    def _create_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ª—ç–π–∞—É—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        if not self.progress:
            return Table()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_panel = self.progress
        
        # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_table = Table(title="üìä Sync Statistics", show_header=True, header_style="bold magenta")
        stats_table.add_column("Metric", style="cyan")
        stats_table.add_column("Value", justify="right")
        
        stats_table.add_row("‚úÖ Completed", str(self.stats.completed))
        stats_table.add_row("‚ùå Failed", str(self.stats.failed))
        stats_table.add_row("‚è≠Ô∏è Skipped", str(self.stats.skipped))
        stats_table.add_row("‚è±Ô∏è Elapsed", f"{self.stats.elapsed_time:.1f}s")
        
        if self.stats.eta_seconds:
            stats_table.add_row("üîÆ ETA", f"{self.stats.eta_seconds:.1f}s")
        
        # –ö–æ–º–ø–æ–Ω—É–µ–º –≤—Å–µ –≤–º–µ—Å—Ç–µ
        from rich.columns import Columns
        return Columns([progress_panel, stats_table])


class JsonReporter(ProgressReporter):
    """–†–µ–ø–æ—Ä—Ç–µ—Ä –≤ JSON —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è –º–∞—à–∏–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏)."""
    
    def __init__(self, name: str = "sync", output_file: Optional[str] = None, 
                 real_time: bool = False):
        super().__init__(name)
        self.output_file = output_file
        self.real_time = real_time  # –ü–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    
    def _handle_event(self, event: ProgressEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ JSON –≤—ã–≤–æ–¥."""
        event_dict = event.to_dict()
        event_dict['stats'] = asdict(self.stats)
        
        if self.real_time:
            if self.output_file:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–ª
                with open(self.output_file, 'a') as f:
                    json.dump(event_dict, f, ensure_ascii=False)
                    f.write('\n')
            else:
                # –í—ã–≤–æ–¥–∏–º –≤ stdout
                print(json.dumps(event_dict, ensure_ascii=False))
    
    def end_sync(self, success: bool = True):
        """–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞."""
        super().end_sync(success)
        
        if not self.real_time and self.output_file:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –≤ –∫–æ–Ω—Ü–µ
            report = {
                'sync_name': self.name,
                'stats': asdict(self.stats),
                'events': [event.to_dict() for event in self.events],
                'summary': {
                    'success': success,
                    'total_events': len(self.events),
                    'duration_seconds': self.stats.elapsed_time
                }
            }
            
            with open(self.output_file, 'w') as f:
                json.dump(report, f, indent=2, ensure_ascii=False)


class MultiReporter(ProgressReporter):
    """–†–µ–ø–æ—Ä—Ç–µ—Ä, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∏–π –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–≤."""
    
    def __init__(self, name: str = "sync", reporters: List[ProgressReporter] = None):
        super().__init__(name)
        self.reporters = reporters or []
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–∂–¥—É —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞–º–∏
        for reporter in self.reporters:
            reporter.stats = self.stats
    
    def add_reporter(self, reporter: ProgressReporter):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞."""
        reporter.stats = self.stats
        self.reporters.append(reporter)
    
    def _handle_event(self, event: ProgressEvent):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –≤—Å–µ —Ä–µ–ø–æ—Ä—Ç–µ—Ä—ã."""
        for reporter in self.reporters:
            try:
                reporter._handle_event(event)
            except Exception as e:
                # –ù–µ –ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–≤ —Å–ª–æ–º–∞–ª—Å—è
                print(f"Warning: Reporter {type(reporter).__name__} failed: {e}")


class SilentReporter(ProgressReporter):
    """–¢–∏—Ö–∏–π —Ä–µ–ø–æ—Ä—Ç–µ—Ä (–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç)."""
    
    def _handle_event(self, event: ProgressEvent):
        """–ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º."""
        pass


# –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–≤
def create_reporter(reporter_type: str, **kwargs) -> ProgressReporter:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–µ—Ä–æ–≤."""
    
    if reporter_type == "logging":
        return LoggingReporter(**kwargs)
    elif reporter_type == "tqdm":
        if not TQDM_AVAILABLE:
            raise ImportError("tqdm is required. Install with: pip install tqdm")
        return TqdmReporter(**kwargs)
    elif reporter_type == "rich":
        if not RICH_AVAILABLE:
            raise ImportError("rich is required. Install with: pip install rich")
        return RichReporter(**kwargs)
    elif reporter_type == "json":
        return JsonReporter(**kwargs)
    elif reporter_type == "silent":
        return SilentReporter(**kwargs)
    else:
        raise ValueError(f"Unknown reporter type: {reporter_type}")